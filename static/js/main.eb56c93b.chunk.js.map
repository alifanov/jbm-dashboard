{"version":3,"sources":["components/WidgetConfig/index.js","components/Widget/index.js","components/Cell/index.js","components/GithubWidget/index.js","components/YoutubeWidget/index.js","App.js","serviceWorker.js","index.js"],"names":["WidgetConfig","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","onSave","config","objectWithoutProperties","_this2","react_default","a","createElement","entries","map","item","className","key","type","placeholder","value","onChange","e","setState","defineProperty","target","onClick","objectSpread","React","Component","Widget","widgetKey","JSON","parse","localStorage","getItem","reduce","o","configMode","data","getData","setInterval","setItem","stringify","_this3","fa","WidgetConfig_WidgetConfig","assign","result","saveConfig","renderWidget","components_Cell","title","GithubWidget","initConfig","fetch","headers","Authorization","concat","token","method","body","res","json","followers","viewer","totalCount","repositories","starredRepositories","edges","node","stargazers","b","YoutubeWidget","channel","views","items","statistics","viewCount","subscribers","subscriberCount","videos","videoCount","App","GithubWidget_GithubWidget","YoutubeWidget_YoutubeWidget","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb56c93b.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class WidgetConfig extends React.Component {\n  state = {};\n  constructor(props) {\n    super(props);\n    const { onSave, ...config } = props;\n    this.state = config;\n  }\n  render() {\n    return (\n      <div>\n        {Object.entries(this.state).map(item => (\n          <div className=\"cell-config-field\" key={item[0]}>\n            <input\n              type=\"text\"\n              placeholder={item[0]}\n              value={item[1]}\n              onChange={e => this.setState({ [item[0]]: e.target.value })}\n            />\n          </div>\n        ))}\n\n        <div className=\"cell-config-field\">\n          <button onClick={() => this.props.onSave({ ...this.state })}>\n            Save\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport \"./index.css\";\n\nimport { FaCog } from \"react-icons/fa\";\n\nimport WidgetConfig from \"../WidgetConfig\";\nexport default class Widget extends React.Component {\n  config = [];\n  widgetKey = \"-\";\n\n  initConfig() {\n    const config = JSON.parse(localStorage.getItem(this.widgetKey));\n\n    this.state = {\n      config: this.config.reduce(\n        (o, key) => ({ ...o, [key]: config ? config[key] : \"\" }),\n        {}\n      ),\n      configMode: false,\n      data: {}\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n    setInterval(() => this.getData(), 5000);\n  }\n\n  saveConfig(config) {\n    localStorage.setItem(this.widgetKey, JSON.stringify(config));\n    this.setState({ configMode: false, ...config });\n    this.getData();\n  }\n\n  async getData() {}\n\n  renderVisual() {\n    return <div className=\"row\">Widget</div>;\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <h2>\n          {this.widgetKey}{\" \"}\n          <span\n            onClick={() =>\n              this.setState({ configMode: !this.state.configMode })\n            }\n          >\n            <FaCog />\n          </span>\n        </h2>\n        {this.state.configMode ? (\n          <WidgetConfig\n            onSave={result => this.saveConfig({ ...result })}\n            {...this.state.config}\n          />\n        ) : (\n          this.renderWidget()\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport \"./index.css\";\n\nexport default props => (\n  <div className=\"cell\">\n    <div className=\"cell-title\">{props.title}</div>\n    <div className=\"cell-body\">\n      <div className=\"cell-indicator\">{props.value}</div>\n    </div>\n  </div>\n);\n","import React from \"react\";\n\nimport Widget from \"../Widget\";\nimport Cell from \"../Cell\";\n\nimport \"./index.css\";\n\nexport default class GithubWidget extends Widget {\n  config = [\"username\", \"token\"];\n  widgetKey = \"github\";\n\n  constructor() {\n    super();\n    this.initConfig();\n  }\n\n  async getData() {\n    const res = await fetch(\"https://api.github.com/graphql\", {\n      headers: { Authorization: `bearer ${this.state.config.token}` },\n      method: \"POST\",\n      body:\n        '{\"query\": \"query {viewer { followers {totalCount}, repositories(isFork: false, first: 100) { totalCount, edges { node { stargazers {totalCount}, name}} }}}\"}'\n    });\n    const data = await res.json();\n    this.setState({\n      data: {\n        followers: data.data.viewer.followers.totalCount,\n        repositories: data.data.viewer.repositories.totalCount,\n        starredRepositories: data.data.viewer.repositories.edges\n          .map(e => e.node.stargazers.totalCount)\n          .reduce((a, b) => a + b, 0)\n      }\n    });\n  }\n\n  renderWidget() {\n    return (\n      <div className=\"row\">\n        <Cell title={\"Repos\"} value={this.state.data.repositories || 0} />\n        <Cell title={\"Folowers\"} value={this.state.data.followers || 0} />\n        <Cell\n          title={\"Stars\"}\n          value={this.state.data.starredRepositories || 0}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport Widget from \"../Widget\";\nimport Cell from \"../Cell\";\n\nimport \"./index.css\";\n\nexport default class YoutubeWidget extends Widget {\n  config = [\"channel\", \"token\"];\n  widgetKey = \"youtube\";\n\n  constructor() {\n    super();\n    this.initConfig();\n  }\n\n  async getData() {\n    const res = await fetch(\n      `https://www.googleapis.com/youtube/v3/channels?id=${\n        this.state.config.channel\n      }%20&part=statistics&key=${this.state.config.token}`\n    );\n    const data = await res.json();\n    this.setState({\n      data: {\n        views: data.items[0].statistics.viewCount,\n        subscribers: data.items[0].statistics.subscriberCount,\n        videos: data.items[0].statistics.videoCount\n      }\n    });\n  }\n\n  renderWidget() {\n    return (\n      <div className=\"row\">\n        <Cell title={\"Views\"} value={this.state.data.views || 0} />\n        <Cell title={\"Subscribers\"} value={this.state.data.subscribers || 0} />\n        <Cell title={\"Videos\"} value={this.state.data.videos || 0} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport GithubWidget from \"./components/GithubWidget\";\nimport YoutubeWidget from \"./components/YoutubeWidget\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <GithubWidget />\n        <YoutubeWidget />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}