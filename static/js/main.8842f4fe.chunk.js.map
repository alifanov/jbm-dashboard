{"version":3,"sources":["components/WidgetConfig/index.js","components/Widget/index.js","components/Cell/index.js","components/GithubWidget/index.js","components/YoutubeWidget/index.js","components/TelegramWidget/index.js","components/AsanaWidget/index.js","components/MediumWidget/index.js","components/KaggleWidget/index.js","App.js","serviceWorker.js","index.js"],"names":["WidgetConfig","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","onSave","config","objectWithoutProperties","_this2","react_default","a","createElement","className","entries","map","item","key","type","placeholder","value","onChange","e","setState","defineProperty","target","onClick","objectSpread","React","Component","Widget","widgetKey","JSON","parse","localStorage","getItem","reduce","o","configMode","data","getData","setItem","stringify","fa","WidgetConfig_WidgetConfig","assign","result","saveConfig","renderWidget","components_Cell","title","GithubWidget","initConfig","fetch","headers","Authorization","concat","token","method","body","res","json","followers","viewer","totalCount","repositories","starredRepositories","edges","node","stargazers","b","YoutubeWidget","channel","views","items","statistics","viewCount","subscribers","subscriberCount","videos","videoCount","TelegramWidget","AsanaWidget","client","asana","Client","create","useAccessToken","users","me","user","userId","id","workspaceId","workspaces","tasks","findAll","limit","assignee","workspace","opt_fields","count","filter","task","completed","length","MediumWidget","proxyUrl","Access-Control-Allow-Origin","text","doc","DOMParser","parseFromString","toConsumableArray","querySelectorAll","forEach","el","matched","exec","innerHTML","parseInt","KaggleWidget","competition","btoa","username","public","publicScore","private","privateScore","WidthGridLayout","WidthProvider","GridLayout","App","layout","i","x","y","w","h","cols","rowHeight","isResizable","onDragStop","saveLayout","draggableHandle","GithubWidget_GithubWidget","YoutubeWidget_YoutubeWidget","TelegramWidget_TelegramWidget","AsanaWidget_AsanaWidget","MediumWidget_MediumWidget","KaggleWidget_KaggleWidget","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8842f4fe.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./index.css\";\n\nexport default class WidgetConfig extends React.Component {\n  state = {};\n  constructor(props) {\n    super(props);\n    const { onSave, ...config } = props;\n    this.state = config;\n  }\n  render() {\n    return (\n      <div className=\"config\">\n        {Object.entries(this.state).map(item => (\n          <div className=\"cell-config-field\" key={item[0]}>\n            <input\n              type=\"text\"\n              placeholder={item[0]}\n              value={this.state[item[0]]}\n              onChange={e => this.setState({ [item[0]]: e.target.value })}\n            />\n          </div>\n        ))}\n\n        <div className=\"cell-config-field\">\n          <button onClick={() => this.props.onSave({ ...this.state })}>\n            Save\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport \"./index.css\";\n\nimport { FaCog, FaExpandArrowsAlt } from \"react-icons/fa\";\n\nimport WidgetConfig from \"../WidgetConfig\";\nexport default class Widget extends React.Component {\n  config = [];\n  widgetKey = \"-\";\n\n  initConfig() {\n    const config = JSON.parse(localStorage.getItem(this.widgetKey));\n\n    this.state = {\n      config: this.config.reduce(\n        (o, key) => ({ ...o, [key]: config ? config[key] : \"\" }),\n        {}\n      ),\n      configMode: false,\n      data: {}\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n    // setInterval(() => this.getData(), 5000);\n  }\n\n  saveConfig(config) {\n    localStorage.setItem(this.widgetKey, JSON.stringify(config));\n    this.setState({ configMode: false, ...config });\n    this.getData();\n  }\n\n  async getData() {}\n\n  renderVisual() {\n    return <div className=\"row\">Widget</div>;\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <span className=\"dragging\">\n          <FaExpandArrowsAlt />\n        </span>\n        <h2 className=\"widget-title\">{this.widgetKey} </h2>\n        <span\n          className=\"config-btn\"\n          onClick={() => this.setState({ configMode: !this.state.configMode })}\n        >\n          <FaCog />\n        </span>\n        {this.state.configMode ? (\n          <WidgetConfig\n            onSave={result => this.saveConfig({ ...result })}\n            {...this.state.config}\n          />\n        ) : (\n          this.renderWidget()\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport \"./index.css\";\n\nexport default props => (\n  <div className=\"cell\">\n    <div className=\"cell-title\">{props.title}</div>\n    <div className=\"cell-body\">\n      <div className=\"cell-indicator\">{props.value}</div>\n    </div>\n  </div>\n);\n","import React from \"react\";\n\nimport Widget from \"../Widget\";\nimport Cell from \"../Cell\";\n\nimport \"./index.css\";\n\nexport default class GithubWidget extends Widget {\n  config = [\"username\", \"token\"];\n  widgetKey = \"github\";\n\n  constructor() {\n    super();\n    this.initConfig();\n  }\n\n  async getData() {\n    const res = await fetch(\"https://api.github.com/graphql\", {\n      headers: { Authorization: `bearer ${this.state.config.token}` },\n      method: \"POST\",\n      body:\n        '{\"query\": \"query {viewer { followers {totalCount}, repositories(isFork: false, first: 100) { totalCount, edges { node { stargazers {totalCount}, name}} }}}\"}'\n    });\n    const data = await res.json();\n    this.setState({\n      data: {\n        followers: data.data.viewer.followers.totalCount,\n        repositories: data.data.viewer.repositories.totalCount,\n        starredRepositories: data.data.viewer.repositories.edges\n          .map(e => e.node.stargazers.totalCount)\n          .reduce((a, b) => a + b, 0)\n      }\n    });\n  }\n\n  renderWidget() {\n    return (\n      <div className=\"row\">\n        <Cell title={\"Repos\"} value={this.state.data.repositories || 0} />\n        <Cell title={\"Folowers\"} value={this.state.data.followers || 0} />\n        <Cell\n          title={\"Stars\"}\n          value={this.state.data.starredRepositories || 0}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport Widget from \"../Widget\";\nimport Cell from \"../Cell\";\n\nimport \"./index.css\";\n\nexport default class YoutubeWidget extends Widget {\n  config = [\"channel\", \"token\"];\n  widgetKey = \"youtube\";\n\n  constructor() {\n    super();\n    this.initConfig();\n  }\n\n  async getData() {\n    const res = await fetch(\n      `https://www.googleapis.com/youtube/v3/channels?id=${\n        this.state.config.channel\n      }%20&part=statistics&key=${this.state.config.token}`\n    );\n    const data = await res.json();\n    this.setState({\n      data: {\n        views: data.items[0].statistics.viewCount,\n        subscribers: data.items[0].statistics.subscriberCount,\n        videos: data.items[0].statistics.videoCount\n      }\n    });\n  }\n\n  renderWidget() {\n    return (\n      <div className=\"row\">\n        <Cell title={\"Views\"} value={this.state.data.views || 0} />\n        <Cell title={\"Subscribers\"} value={this.state.data.subscribers || 0} />\n        <Cell title={\"Videos\"} value={this.state.data.videos || 0} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport Widget from \"../Widget\";\nimport Cell from \"../Cell\";\n\nimport \"./index.css\";\n\nexport default class TelegramWidget extends Widget {\n  config = [\"token\"];\n  widgetKey = \"telegram\";\n\n  constructor() {\n    super();\n    this.initConfig();\n  }\n\n  async getData() {}\n\n  renderWidget() {\n    return (\n      <div className=\"row\">\n        <Cell title={\"Followers\"} value={this.state.data.followers || 0} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport asana from \"asana\";\n\nimport Widget from \"../Widget\";\nimport Cell from \"../Cell\";\n\nimport \"./index.css\";\n\nexport default class AsanaWidget extends Widget {\n  config = [\"token\"];\n  widgetKey = \"asana\";\n\n  constructor() {\n    super();\n    this.initConfig();\n    this.client = asana.Client.create().useAccessToken(this.state.config.token);\n  }\n\n  async getData() {\n    const user = await this.client.users.me();\n    const userId = user.id;\n    const workspaceId = user.workspaces[0].id;\n    const res = await this.client.tasks.findAll({\n      limit: 100,\n      assignee: userId,\n      workspace: workspaceId,\n      opt_fields: \"id,completed\"\n    });\n    const tasks = await res.data;\n    const count = tasks.filter(task => task.completed === false).length;\n    this.setState({ data: { tasks: count } });\n  }\n\n  renderWidget() {\n    return (\n      <div className=\"row\">\n        <Cell title={\"Tasks\"} value={this.state.data.tasks || 0} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport Widget from \"../Widget\";\nimport Cell from \"../Cell\";\n\nimport \"./index.css\";\n\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n\nexport default class MediumWidget extends Widget {\n  config = [\"account\"];\n  widgetKey = \"medium\";\n\n  constructor() {\n    super();\n    this.initConfig();\n  }\n\n  async getData() {\n    const res = await fetch(\n      proxyUrl + \"https://medium.com/@jetbootsmaker/followers\",\n      {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      }\n    );\n    const data = await res.text();\n    const doc = new DOMParser().parseFromString(data, \"text/html\");\n    [...doc.querySelectorAll(\"script\")].forEach(el => {\n      const matched = /\"usersFollowedByCount\":(\\d+),/.exec(el.innerHTML);\n      if (matched) {\n        this.setState({\n          data: {\n            followers: parseInt(matched[1])\n          }\n        });\n      }\n    });\n  }\n\n  renderWidget() {\n    return (\n      <div className=\"row\">\n        <Cell title={\"Follower\"} value={this.state.data.followers || 0} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport Widget from \"../Widget\";\nimport Cell from \"../Cell\";\n\nimport \"./index.css\";\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n\nexport default class KaggleWidget extends Widget {\n  config = [\"competition\", \"username\", \"token\"];\n  widgetKey = \"kaggle\";\n\n  constructor() {\n    super();\n    this.initConfig();\n  }\n\n  async getData() {\n    const res = await fetch(\n      proxyUrl +\n        \"https://www.kaggle.com/api/v1/competitions/submissions/list/\" +\n        this.state.config.competition,\n      {\n        headers: {\n          Authorization:\n            \"Basic \" +\n            btoa(this.state.config.username + \":\" + this.state.config.token)\n        }\n      }\n    );\n    const data = await res.json();\n    this.setState({\n      data: {\n        public: data[0].publicScore,\n        private: data[0].privateScore\n      }\n    });\n  }\n\n  renderWidget() {\n    return (\n      <div className=\"row\">\n        <Cell title={\"Public\"} value={this.state.data.public || 0} />\n        <Cell title={\"Private\"} value={this.state.data.private || 0} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport GridLayout, { WidthProvider } from \"react-grid-layout\";\n\nimport \"./App.css\";\n\nimport \"react-grid-layout/css/styles.css\";\nimport \"react-resizable/css/styles.css\";\n\nimport GithubWidget from \"./components/GithubWidget\";\nimport YoutubeWidget from \"./components/YoutubeWidget\";\nimport TelegramWidget from \"./components/TelegramWidget\";\nimport AsanaWidget from \"./components/AsanaWidget\";\nimport MediumWidget from \"./components/MediumWidget\";\nimport KaggleWidget from \"./components/KaggleWidget\";\n\nconst WidthGridLayout = WidthProvider(GridLayout);\n\nclass App extends Component {\n  state = {};\n\n  componentDidMount() {\n    const layout = localStorage.getItem(\"layout\");\n    if (layout !== null) {\n      this.setState({ layout: JSON.parse(layout) });\n    } else {\n      this.setState({\n        layout: [\n          { i: \"github\", x: 0, y: 0, w: 1, h: 1 },\n          { i: \"youtube\", x: 1, y: 0, w: 1, h: 1 },\n          { i: \"telegram\", x: 2, y: 0, w: 1, h: 1 },\n          { i: \"asana\", x: 0, y: 1, w: 1, h: 1 },\n          { i: \"medium\", x: 1, y: 1, w: 1, h: 1 },\n          { i: \"kaggle\", x: 2, y: 1, w: 1, h: 1 }\n        ]\n      });\n    }\n  }\n\n  saveLayout(layout) {\n    localStorage.setItem(\"layout\", JSON.stringify(layout));\n    this.setState({ layout });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <WidthGridLayout\n          className=\"layout\"\n          cols={3}\n          rowHeight={235}\n          isResizable={false}\n          layout={this.state.layout}\n          onDragStop={layout => this.saveLayout(layout)}\n          draggableHandle=\".dragging\"\n        >\n          <div key=\"github\">\n            <GithubWidget />\n          </div>\n          <div key=\"youtube\">\n            <YoutubeWidget />\n          </div>\n          <div key=\"telegram\">\n            <TelegramWidget />\n          </div>\n          <div key=\"asana\">\n            <AsanaWidget />\n          </div>\n          <div key=\"medium\">\n            <MediumWidget />\n          </div>\n          <div key=\"kaggle\">\n            <KaggleWidget />\n          </div>\n        </WidthGridLayout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}